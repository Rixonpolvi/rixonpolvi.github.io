import CodeBlock from "../../components/CodeBlock/CodeBlock";

const deploy = `      
# Install dependencies
- name: 📦 Install dependencies
  run: npm ci # Like npm install but faster for automation

# Dependency scanning
- name: 🛡️ Run Security Audit
  run: npm audit --audit-level=high

# Build the React app
- name: 🏗️ Build React app
  run: npm run build
`


const ShiftingLeftIntegratingVulnerabilityScanningIntoYourCICDPipeline: React.FC =
  () => {
    return (
      <article>
        <p>
          A modern CI/CD pipeline's responsibilities extend far beyond only
          building and deploying code. It is the ideal place to proactively
          incorporate defensive security measures for both you and your users.
        </p>
        <p>
          One of the primary attack surfaces of an application is its
          dependency tree - a sprawling web of packages many times larger than
          the list a developer directly imports. As a single vulnerability here
          can threaten the entire system, the most effective way to manage this
          complexity is by integrating vulnerability scanning into the build
          process itself.
        </p>

        <p>
          Follow along as I enhance the pipeline on my own site with this
          control, and demonstrate both a fail and a pass.
        </p>

        <h2>Adding the Security Gate</h2>
        <p>Let's take the existing CI/CD pipeline for this site.
          It is already building and deploying this site to github pages with every pull request. 
          What we want to do is add a security check <code>npm audit --audit-level=high</code> <i>in-between</i> the installation and build steps.
          Adding the flag <code>--audit-level=high</code> sets the minimum level that the check fail on.
        </p>
        <CodeBlock code={deploy} language="yaml" />
        <p>
        With our security check in place we will now install an npm package with a <b>high</b> vulnerability.
        Axios version 0.21.1 will work for this test.
        It contains ___ vulnerability, a _____.

        https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459
        </p>
        <p>
        After committing the vulnerable dependency and creating a pull request, our deploy action runs.

        We can quickly see it fail, and when checking the details, can see exactly where and why.
        The npm --audit check detected axios@0.21.1 with its several vulnerabilities and exited the build process.

        </p>

        <p>
          Lets now fix the broken dependency, by updating it to a patched version.
          
        </p>
      </article>
    );
  };

export default ShiftingLeftIntegratingVulnerabilityScanningIntoYourCICDPipeline;
